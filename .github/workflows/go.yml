# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        go-version: [ '1.21' ]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: |
          go get .
          go install fyne.io/fyne/v2/cmd/fyne@latest

      - name: Build
        run: |
          fyne package -os windows
          .\build.bat "build" "Запуск скриптов.exe"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: build

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Build zip # This would actually build your project, using zip for an example artifact
        run: |
          ls -R
          tar --exclude='build-zip.zip' -cvf build-zip.zip *
      # Другой способ архивирования
      #    Compress-Archive * build.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          # body_path: ./README.md
          body: |
            Desktop приложение для удобного запуска .bat файлов.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./build-zip.zip
          asset_name: build-artifact.zip
          asset_content_type: application/zip